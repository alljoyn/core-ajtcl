#    Copyright (c) Open Connectivity Foundation (OCF), AllJoyn Open Source
#    Project (AJOSP) Contributors and others.
#    
#    SPDX-License-Identifier: Apache-2.0
#    
#    All rights reserved. This program and the accompanying materials are
#    made available under the terms of the Apache License, Version 2.0
#    which accompanies this distribution, and is available at
#    http://www.apache.org/licenses/LICENSE-2.0
#    
#    Copyright (c) Open Connectivity Foundation and Contributors to AllSeen
#    Alliance. All rights reserved.
#    
#    Permission to use, copy, modify, and/or distribute this software for
#    any purpose with or without fee is hereby granted, provided that the
#    above copyright notice and this permission notice appear in all
#    copies.
#    
#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
#    WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
#    WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
#    AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
#    DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
#    PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
#    TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
#    PERFORMANCE OF THIS SOFTWARE.
import os

Import('env')

# Target specific SCons command line variables
vars = Variables()
vars.Add(BoolVariable('FORCE32',   'Force building 32 bit on 64 bit architecture',           os.environ.get('AJ_FORCE32', False)))
vars.Add(BoolVariable('NO_AUTH',   "Compile in authentication mechanism's to the code base", os.environ.get('AJ_NO_AUTH', False)))
vars.Update(env)
Help(vars.GenerateHelpText(env))


# Platform libraries
env.Append(LIBS = ['rt', 'pthread'])

# Cross compile setup
if os.environ.has_key('CROSS_PREFIX'):
    cc = env['CC']
    cxx = env['CXX']
    ar = env['AR']
    ranlib = env['RANLIB']
    env.Replace(CC = os.environ['CROSS_PREFIX'] + cc)
    env.Replace(CXX = os.environ['CROSS_PREFIX'] + cxx)
    env.Replace(LINK = os.environ['CROSS_PREFIX'] + cc)
    env.Replace(AR = os.environ['CROSS_PREFIX'] + ar)
    env.Replace(RANLIB = os.environ['CROSS_PREFIX'] + ranlib)
    env['ENV']['STAGING_DIR'] = os.environ.get('STAGING_DIR', '')
if os.environ.has_key('CROSS_PATH'):
    env['ENV']['PATH'] = ':'.join([ os.environ['CROSS_PATH'], env['ENV']['PATH'] ] )
if os.environ.has_key('CROSS_CFLAGS'):
    env.Append(CFLAGS=os.environ['CROSS_CFLAGS'].split())
if os.environ.has_key('CROSS_LINKFLAGS'):
    env.Append(LINKFLAGS=os.environ['CROSS_LINKFLAGS'].split())

# Compiler flags
env.Append(CFLAGS = [
    '-pipe',
    '-funsigned-char',
    '-fno-strict-aliasing',
    '-Wall',
    '-Waggregate-return',
    '-Wbad-function-cast',
    '-Wcast-align',
    '-Wfloat-equal',
    '-Wformat=2',
    '-Wno-unknown-pragmas',
    '-Wpacked',
    '-Wpointer-arith',
    '-Wshadow',
    '-Wundef',
    '-Wformat-security',
    '-Werror=format-security',
    '-Wwrite-strings'
])

if env['FORCE32']:
    env.Append(CFLAGS = '-m32')
    env.Append(LINKFLAGS = '-m32')
env.Append(CPPDEFINES = [ 'AJ_MAIN' ])
if env['NO_AUTH']:
    env.Append(CPPDEFINES = [ 'TEST_DISABLE_SECURITY' ])

# Debug/Release Variants
if env['VARIANT'] == 'debug':
    env.Append(CFLAGS = '-g')
    env.Append(CFLAGS = '-ggdb')
    env.Append(CXXFLAGS = '-g')
    env.Append(CXXFLAGS = '-ggdb')
else:
    env.Append(CFLAGS = '-Os')
    env.Append(LINKFLAGS = '-s')

# Unit test build preprocessor macro
if os.environ.has_key('GTEST_DIR') or ARGUMENTS.get('GTEST_DIR'):
    env.Append(CPPDEFINES = ['GTEST_ENABLED'])

env['build_shared'] = True
env['connectivity_options'] = [ 'tcp', 'ardp' ]

# Large Memory Platform
env.Append(CPPDEFINES = ['AJ_NVRAM_SIZE=64000'])
env.Append(CPPDEFINES = ['AJ_NVRAM_SIZE_CREDS=10000'])
env.Append(CPPDEFINES = ['AJ_NVRAM_SIZE_SERVICES=10000'])
env.Append(CPPDEFINES = ['AJ_NVRAM_SIZE_FRAMEWORK=10000'])
env.Append(CPPDEFINES = ['AJ_NVRAM_SIZE_ALLJOYNJS=10000'])
env.Append(CPPDEFINES = ['AJ_NVRAM_SIZE_RESERVED=14000'])
env.Append(CPPDEFINES = ['AJ_NVRAM_SIZE_APPS=10000'])
env.Append(CPPDEFINES = ['AJ_NUM_REPLY_CONTEXTS=8'])
